import {
	Euler,
	EventDispatcher,
	MathUtils,
	Spherical,
	Vector3
} from '../../../build/three.module.js';

const _euler = new Euler( 0, 0, 0, 'YXZ' );
const _vector = new Vector3();

const _changeEvent = { type: 'change' };
const _lockEvent = { type: 'lock' };
const _unlockEvent = { type: 'unlock' };

const _PI_2 = Math.PI / 2;

let movementY, movementX, viewHalfX, viewHalfY;

class PointerLockMovementControls extends EventDispatcher {

	constructor( camera, domElement ) {

		super();

		if ( domElement === undefined ) {

			console.warn( 'THREE.PointerLockControls: The second parameter "domElement" is now mandatory.' );
			domElement = document.body;

		}

		this.camera = camera;
		this.domElement = domElement;
		this.isLocked = false;

		// FirstPersonControls

		let mveForward, mveBackward, mveLeft, mveRight = false;

		const scope = this;

		function onKeyDown( event ) {

			switch ( event.code ) {

				case 'ArrowUp':
				case 'KeyW': mveForward = true; break;

				case 'ArrowLeft':
				case 'KeyA': mveLeft = true; break;

				case 'ArrowDown':
				case 'KeyS': mveBackward = true; break;

				case 'ArrowRight':
				case 'KeyD': mveRight = true; break;

			}

		};

		function onKeyUp( event ) {

			switch ( event.code ) {

				case 'ArrowUp':
				case 'KeyW': mveForward = false; break;

				case 'ArrowLeft':
				case 'KeyA': mveLeft = false; break;

				case 'ArrowDown':
				case 'KeyS': mveBackward = false; break;

				case 'ArrowRight':
				case 'KeyD': mveRight = false; break;

			}

		};

		this.update = function () {

			return function update( delta ) {

				if (! scope.isLocked ) return;

				let actualMoveSpeed = delta * 1.5;

				if ( mveForward ) this.camera.translateZ( - ( actualMoveSpeed ) );
				if ( mveBackward ) this.camera.translateZ( actualMoveSpeed );

				if ( mveLeft ) this.camera.translateX( - actualMoveSpeed );
				if ( mveRight ) this.camera.translateX( actualMoveSpeed );

			};

		}();

		// Set to constrain the pitch of the camera
		// Range is 0 to Math.PI radians
		this.minPolarAngle = 0; // radians
		this.maxPolarAngle = Math.PI; // radians

		function onMouseMove( event ) {

			if ( scope.isLocked === false ) return;

			movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;
			movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;

			_euler.setFromQuaternion( camera.quaternion );

			_euler.y -= movementX * 0.001;
			_euler.x -= movementY * 0.001;

			_euler.x = Math.max( _PI_2 - scope.maxPolarAngle, Math.min( _PI_2 - scope.minPolarAngle, _euler.x ) );

			camera.quaternion.setFromEuler( _euler );

			scope.dispatchEvent( _changeEvent );

		}

		function onPointerlockChange() {

			if ( scope.domElement.ownerDocument.pointerLockElement === scope.domElement ) {

				scope.dispatchEvent( _lockEvent );

				scope.isLocked = true;

			} else {

				scope.dispatchEvent( _unlockEvent );

				scope.isLocked = false;

			}

		}

		function onPointerlockError() {

			console.error( 'THREE.PointerLockControls: Unable to use Pointer Lock API' );

		}

		this.connect = function () {

			scope.domElement.ownerDocument.addEventListener( 'mousemove', onMouseMove );
			scope.domElement.ownerDocument.addEventListener( 'keyup', onKeyUp );
			scope.domElement.ownerDocument.addEventListener( 'keydown', onKeyDown );
			scope.domElement.ownerDocument.addEventListener( 'pointerlockchange', onPointerlockChange );
			scope.domElement.ownerDocument.addEventListener( 'pointerlockerror', onPointerlockError );

		};

		this.disconnect = function () {

			scope.domElement.ownerDocument.removeEventListener( 'mousemove', onMouseMove );
			scope.domElement.ownerDocument.removeEventListener( 'keyup', onKeyUp );
			scope.domElement.ownerDocument.removeEventListener( 'keydown', onKeyDown );
			scope.domElement.ownerDocument.removeEventListener( 'pointerlockchange', onPointerlockChange );
			scope.domElement.ownerDocument.removeEventListener( 'pointerlockerror', onPointerlockError );

		};

		this.dispose = function () {

			this.disconnect();

		};

		this.getObject = function () { // retaining this method for backward compatibility

			return camera;

		};


		this.lock = function () {

			this.domElement.requestPointerLock();

		};

		this.unlock = function () {

			scope.domElement.ownerDocument.exitPointerLock();

		};

		this.connect();

	}

}

export { PointerLockMovementControls };
